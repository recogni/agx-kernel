/*
 * Copyright (c) 2018-2020, NVIDIA CORPORATION.  All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#include <dt-bindings/media/camera.h>

/ {
	host1x {
		vi@15c10000  {
			num-channels = <6>;
			ports {
				#address-cells = <1>;
				#size-cells = <0>;
				vi_port0: port@0 {
					reg = <0>;
					rbpcv2_ar0820_vi_in0: endpoint {
						port-index = <0>;
						bus-width = <2>;
						remote-endpoint = <&rbpcv2_ar0820_csi_out0>;
					};
				};

				vi_port1: port@1 {
					reg = <1>;
					rbpcv2_ar0820_vi_in1: endpoint {
						port-index = <1>;
						bus-width = <2>;
						remote-endpoint = <&rbpcv2_ar0820_csi_out1>;
					};
				};

				vi_port2: port@2 {
					reg = <2>;
					rbpcv2_ar0820_vi_in2: endpoint {
						port-index = <2>;
						bus-width = <2>;
						remote-endpoint = <&rbpcv2_ar0820_csi_out2>;
					};
				};

				vi_port3: port@3 {
					reg = <3>;
					rbpcv2_ar0820_vi_in3: endpoint {
						port-index = <3>;
						bus-width = <2>;
						remote-endpoint = <&rbpcv2_ar0820_csi_out3>;
					};
				};

				vi_port4: port@4 {
					reg = <4>;
					rbpcv2_ar0820_vi_in4: endpoint {
						port-index = <4>;
						bus-width = <2>;
						remote-endpoint = <&rbpcv2_ar0820_csi_out4>;
					};
				};

				vi_port5: port@5 {
					reg = <5>;
					rbpcv2_ar0820_vi_in5: endpoint {
						port-index = <5>;
						bus-width = <2>;
						remote-endpoint = <&rbpcv2_ar0820_csi_out5>;
					};
				};
			};
		};

		nvcsi@15a00000 {
			num-channels = <6>;
			#address-cells = <1>;
			#size-cells = <0>;
			csi_chan0: channel@0 {
				reg = <0>;
				ports {
					#address-cells = <1>;
					#size-cells = <0>;
					csi_chan0_port0: port@0 {
						reg = <0>;
						rbpcv2_ar0820_csi_in0: endpoint@0 {
							port-index = <0>;
							bus-width = <2>;
							remote-endpoint = <&rbpcv2_ar0820_out0>;
						};
					};
					csi_chan0_port1: port@1 {
						reg = <1>;
						rbpcv2_ar0820_csi_out0: endpoint@1 {
							remote-endpoint = <&rbpcv2_ar0820_vi_in0>;
						};
					};
				};
			};

			csi_chan1: channel@1 {
				reg = <1>;
				ports {
					#address-cells = <1>;
					#size-cells = <0>;
					csi_chan1_port0: port@0 {
						reg = <0>;
						rbpcv2_ar0820_csi_in1: endpoint@0 {
							port-index = <1>;
							bus-width = <2>;
							remote-endpoint = <&rbpcv2_ar0820_out1>;
						};
					};
					csi_chan1_port1: port@1 {
						reg = <1>;
						rbpcv2_ar0820_csi_out1: endpoint@1 {
							remote-endpoint = <&rbpcv2_ar0820_vi_in1>;
						};
					};
				};
			};

			csi_chan2: channel@2 {
				reg = <2>;
				ports {
					#address-cells = <1>;
					#size-cells = <0>;
					csi_chan2_port0: port@0 {
						reg = <0>;
						rbpcv2_ar0820_csi_in2: endpoint@0 {
							port-index = <2>;
							bus-width = <2>;
							remote-endpoint = <&rbpcv2_ar0820_out2>;
						};
					};
					csi_chan2_port1: port@1 {
						reg = <1>;
						rbpcv2_ar0820_csi_out2: endpoint@1 {
							remote-endpoint = <&rbpcv2_ar0820_vi_in2>;
						};
					};
				};
			};

			csi_chan3: channel@3 {
				reg = <3>;
				ports {
					#address-cells = <1>;
					#size-cells = <0>;
					csi_chan3_port0: port@0 {
						reg = <0>;
						rbpcv2_ar0820_csi_in3: endpoint@0 {
							port-index = <3>;
							bus-width = <2>;
							remote-endpoint = <&rbpcv2_ar0820_out3>;
						};
					};
					csi_chan3_port1: port@1 {
						reg = <1>;
						rbpcv2_ar0820_csi_out3: endpoint@1 {
							remote-endpoint = <&rbpcv2_ar0820_vi_in3>;
						};
					};
				};
			};

			csi_chan4: channel@4 {
				reg = <4>;
				ports {
					#address-cells = <1>;
					#size-cells = <0>;
					csi_chan4_port0: port@0 {
						reg = <0>;
						rbpcv2_ar0820_csi_in4: endpoint@0 {
							port-index = <4>;
							bus-width = <2>;
							remote-endpoint = <&rbpcv2_ar0820_out4>;
						};
					};
					csi_chan4_port1: port@1 {
						reg = <1>;
						rbpcv2_ar0820_csi_out4: endpoint@1 {
							remote-endpoint = <&rbpcv2_ar0820_vi_in4>;
						};
					};
				};
			};

			csi_chan5: channel@5 {
				reg = <5>;
				ports {
					#address-cells = <1>;
					#size-cells = <0>;
					csi_chan5_port0: port@0 {
						reg = <0>;
						rbpcv2_ar0820_csi_in5: endpoint@0 {
							port-index = <6>;
							bus-width = <2>;
							remote-endpoint = <&rbpcv2_ar0820_out5>;
						};
					};
					csi_chan5_port1: port@1 {
						reg = <1>;
						rbpcv2_ar0820_csi_out5: endpoint@1 {
							remote-endpoint = <&rbpcv2_ar0820_vi_in5>;
						};
					};
				};
			};
		};
	};

	i2c@3180000{
		tca9548@77 {
			i2c@0 {
				ar0820@28 {
					compatible = "nvidia,ar0820";
					/* I2C device address */
					reg = <0x28>;

					/* V4L2 device node location */
					devnode = "video0";

					/* Physical dimensions of sensor */
					physical_w = "15.0";
					physical_h = "12.5";

					sensor_model = "ar0820";

					post_crop_frame_drop = "0";

					use_sensor_mode_id = "true";

					/**
					* ==== Modes ====
					* A modeX node is required to support v4l2 driver
					* implementation with NVIDIA camera software stack
					*
					* == Signal properties ==
					*
					* phy_mode = "";
					* PHY mode used by the MIPI lanes for this device
					*
					* tegra_sinterface = "";
					* CSI Serial interface connected to tegra
					* Incase of virtual HW devices, use virtual
					* For SW emulated devices, use host
					*
					* pix_clk_hz = "";
					* Sensor pixel clock used for calculations like exposure and framerate
					*
					* readout_orientation = "0";
					* Based on camera module orientation.
					* Only change readout_orientation if you specifically
					* Program a different readout order for this mode
					*
					* == Image format Properties ==
					*
					* active_w = "";
					* Pixel active region width
					*
					* active_h = "";
					* Pixel active region height
					*
					* pixel_t = "";
					* The sensor readout pixel pattern
					*
					* line_length = "";
					* Pixel line length (width) for sensor mode.
					*
					* == Source Control Settings ==
					*
					* Gain factor used to convert fixed point integer to float
					* Gain range [min_gain/gain_factor, max_gain/gain_factor]
					* Gain step [step_gain/gain_factor is the smallest step that can be configured]
					* Default gain [Default gain to be initialized for the control.
					*     use min_gain_val as default for optimal results]
					* Framerate factor used to convert fixed point integer to float
					* Framerate range [min_framerate/framerate_factor, max_framerate/framerate_factor]
					* Framerate step [step_framerate/framerate_factor is the smallest step that can be configured]
					* Default Framerate [Default framerate to be initialized for the control.
					*     use max_framerate to get required performance]
					* Exposure factor used to convert fixed point integer to float
					* For convenience use 1 sec = 1000000us as conversion factor
					* Exposure range [min_exp_time/exposure_factor, max_exp_time/exposure_factor]
					* Exposure step [step_exp_time/exposure_factor is the smallest step that can be configured]
					* Default Exposure Time [Default exposure to be initialized for the control.
					*     Set default exposure based on the default_framerate for optimal exposure settings]
					*
					* gain_factor = ""; (integer factor used for floating to fixed point conversion)
					* min_gain_val = ""; (ceil to integer)
					* max_gain_val = ""; (ceil to integer)
					* step_gain_val = ""; (ceil to integer)
					* default_gain = ""; (ceil to integer)
					* Gain limits for mode
					*
					* exposure_factor = ""; (integer factor used for floating to fixed point conversion)
					* min_exp_time = ""; (ceil to integer)
					* max_exp_time = ""; (ceil to integer)
					* step_exp_time = ""; (ceil to integer)
					* default_exp_time = ""; (ceil to integer)
					* Exposure Time limits for mode (sec)
					*
					* framerate_factor = ""; (integer factor used for floating to fixed point conversion)
					* min_framerate = ""; (ceil to integer)
					* max_framerate = ""; (ceil to integer)
					* step_framerate = ""; (ceil to integer)
					* default_framerate = ""; (ceil to integer)
					* Framerate limits for mode (fps)
					*
					* embedded_metadata_height = "";
					* Sensor embedded metadata height in units of rows.
					* If sensor does not support embedded metadata value should be 0.
					*/
					mode0 {
						mclk_khz = "27000";
						num_lanes = "2";
						tegra_sinterface = "serial_a";
						phy_mode = "DPHY";
						discontinuous_clk = "no";
						dpcm_enable = "false";
						cil_settletime = "0";

						dynamic_pixel_bit_depth = "12";
						csi_pixel_bit_depth = "12";
						mode_type = "bayer";
						pixel_phase = "grbg";

						active_w = "3840";
						active_h = "2168";
						readout_orientation = "0";
						line_length = "5120";
						inherent_gain = "1";
						mclk_multiplier = "8";
						pix_clk_hz = "204963840";
						serdes_pix_clk_hz = "1300000000";

						gain_factor = "100";
						min_gain_val = "399";
						max_gain_val = "499"; /* 0:1x, 1:2x, 2:4x, 3:8x */
						step_gain_val = "1";
						default_gain = "399";

						min_hdr_ratio = "1";
						max_hdr_ratio = "1";

						framerate_factor = "1000000";
						min_framerate = "30000000";
						max_framerate = "30000000";
						step_framerate = "1";
						default_framerate = "30000000";

						exposure_factor = "1000000";
						min_exp_time = "100"; /* us */
						max_exp_time = "6800"; /* us */
						step_exp_time = "1";
						default_exp_time = "1000"; /* us */

						embedded_metadata_height = "0";
					};

					ports {
						#address-cells = <1>;
						#size-cells = <0>;
						port@0 {
							reg = <0>;
							rbpcv2_ar0820_out0: endpoint {
								port-index = <0>;
								bus-width = <2>;
								remote-endpoint = <&rbpcv2_ar0820_csi_in0>;
							};
						};
					};
				};

				ar0820@2a {
					compatible = "nvidia,ar0820";
					/* I2C device address */
					reg = <0x2a>;

					/* V4L2 device node location */
					devnode = "video1";

					/* Physical dimensions of sensor */
					physical_w = "15.0";
					physical_h = "12.5";

					sensor_model = "ar0820";

					post_crop_frame_drop = "0";

					use_sensor_mode_id = "true";

					/**
					* ==== Modes ====
					* A modeX node is required to support v4l2 driver
					* implementation with NVIDIA camera software stack
					*
					* == Signal properties ==
					*
					* phy_mode = "";
					* PHY mode used by the MIPI lanes for this device
					*
					* tegra_sinterface = "";
					* CSI Serial interface connected to tegra
					* Incase of virtual HW devices, use virtual
					* For SW emulated devices, use host
					*
					* pix_clk_hz = "";
					* Sensor pixel clock used for calculations like exposure and framerate
					*
					* readout_orientation = "0";
					* Based on camera module orientation.
					* Only change readout_orientation if you specifically
					* Program a different readout order for this mode
					*
					* == Image format Properties ==
					*
					* active_w = "";
					* Pixel active region width
					*
					* active_h = "";
					* Pixel active region height
					*
					* pixel_t = "";
					* The sensor readout pixel pattern
					*
					* line_length = "";
					* Pixel line length (width) for sensor mode.
					*
					* == Source Control Settings ==
					*
					* Gain factor used to convert fixed point integer to float
					* Gain range [min_gain/gain_factor, max_gain/gain_factor]
					* Gain step [step_gain/gain_factor is the smallest step that can be configured]
					* Default gain [Default gain to be initialized for the control.
					*     use min_gain_val as default for optimal results]
					* Framerate factor used to convert fixed point integer to float
					* Framerate range [min_framerate/framerate_factor, max_framerate/framerate_factor]
					* Framerate step [step_framerate/framerate_factor is the smallest step that can be configured]
					* Default Framerate [Default framerate to be initialized for the control.
					*     use max_framerate to get required performance]
					* Exposure factor used to convert fixed point integer to float
					* For convenience use 1 sec = 1000000us as conversion factor
					* Exposure range [min_exp_time/exposure_factor, max_exp_time/exposure_factor]
					* Exposure step [step_exp_time/exposure_factor is the smallest step that can be configured]
					* Default Exposure Time [Default exposure to be initialized for the control.
					*     Set default exposure based on the default_framerate for optimal exposure settings]
					*
					* gain_factor = ""; (integer factor used for floating to fixed point conversion)
					* min_gain_val = ""; (ceil to integer)
					* max_gain_val = ""; (ceil to integer)
					* step_gain_val = ""; (ceil to integer)
					* default_gain = ""; (ceil to integer)
					* Gain limits for mode
					*
					* exposure_factor = ""; (integer factor used for floating to fixed point conversion)
					* min_exp_time = ""; (ceil to integer)
					* max_exp_time = ""; (ceil to integer)
					* step_exp_time = ""; (ceil to integer)
					* default_exp_time = ""; (ceil to integer)
					* Exposure Time limits for mode (sec)
					*
					* framerate_factor = ""; (integer factor used for floating to fixed point conversion)
					* min_framerate = ""; (ceil to integer)
					* max_framerate = ""; (ceil to integer)
					* step_framerate = ""; (ceil to integer)
					* default_framerate = ""; (ceil to integer)
					* Framerate limits for mode (fps)
					*
					* embedded_metadata_height = "";
					* Sensor embedded metadata height in units of rows.
					* If sensor does not support embedded metadata value should be 0.
					*/
					mode0 {
						mclk_khz = "27000";
						num_lanes = "2";
						tegra_sinterface = "serial_b";
						phy_mode = "DPHY";
						discontinuous_clk = "no";
						dpcm_enable = "false";
						cil_settletime = "0";

						dynamic_pixel_bit_depth = "12";
						csi_pixel_bit_depth = "12";
						mode_type = "bayer";
						pixel_phase = "grbg";

						active_w = "3840";
						active_h = "2168";
						readout_orientation = "0";
						line_length = "5120";
						inherent_gain = "1";
						mclk_multiplier = "8";
						pix_clk_hz = "204963840";
						serdes_pix_clk_hz = "1300000000";

						gain_factor = "100";
						min_gain_val = "399";
						max_gain_val = "499"; /* 0:1x, 1:2x, 2:4x, 3:8x */
						step_gain_val = "1";
						default_gain = "399";

						min_hdr_ratio = "1";
						max_hdr_ratio = "1";

						framerate_factor = "1000000";
						min_framerate = "30000000";
						max_framerate = "30000000";
						step_framerate = "1";
						default_framerate = "30000000";

						exposure_factor = "1000000";
						min_exp_time = "100"; /* us */
						max_exp_time = "6800"; /* us */
						step_exp_time = "1";
						default_exp_time = "1000"; /* us */

						embedded_metadata_height = "0";
					};


					ports {
						#address-cells = <1>;
						#size-cells = <0>;
						port@0 {
							reg = <0>;
							rbpcv2_ar0820_out1: endpoint {
								port-index = <1>;
								bus-width = <2>;
								remote-endpoint = <&rbpcv2_ar0820_csi_in1>;
							};
						};
					};
				};
			};

			i2c@1 {
				ar0820@28 {
					compatible = "nvidia,ar0820";
					/* I2C device address */
					reg = <0x28>;

					/* V4L2 device node location */
					devnode = "video2";

					/* Physical dimensions of sensor */
					physical_w = "15.0";
					physical_h = "12.5";

					sensor_model = "ar0820";

					post_crop_frame_drop = "0";

					use_sensor_mode_id = "true";

					/**
					* ==== Modes ====
					* A modeX node is required to support v4l2 driver
					* implementation with NVIDIA camera software stack
					*
					* == Signal properties ==
					*
					* phy_mode = "";
					* PHY mode used by the MIPI lanes for this device
					*
					* tegra_sinterface = "";
					* CSI Serial interface connected to tegra
					* Incase of virtual HW devices, use virtual
					* For SW emulated devices, use host
					*
					* pix_clk_hz = "";
					* Sensor pixel clock used for calculations like exposure and framerate
					*
					* readout_orientation = "0";
					* Based on camera module orientation.
					* Only change readout_orientation if you specifically
					* Program a different readout order for this mode
					*
					* == Image format Properties ==
					*
					* active_w = "";
					* Pixel active region width
					*
					* active_h = "";
					* Pixel active region height
					*
					* pixel_t = "";
					* The sensor readout pixel pattern
					*
					* line_length = "";
					* Pixel line length (width) for sensor mode.
					*
					* == Source Control Settings ==
					*
					* Gain factor used to convert fixed point integer to float
					* Gain range [min_gain/gain_factor, max_gain/gain_factor]
					* Gain step [step_gain/gain_factor is the smallest step that can be configured]
					* Default gain [Default gain to be initialized for the control.
					*     use min_gain_val as default for optimal results]
					* Framerate factor used to convert fixed point integer to float
					* Framerate range [min_framerate/framerate_factor, max_framerate/framerate_factor]
					* Framerate step [step_framerate/framerate_factor is the smallest step that can be configured]
					* Default Framerate [Default framerate to be initialized for the control.
					*     use max_framerate to get required performance]
					* Exposure factor used to convert fixed point integer to float
					* For convenience use 1 sec = 1000000us as conversion factor
					* Exposure range [min_exp_time/exposure_factor, max_exp_time/exposure_factor]
					* Exposure step [step_exp_time/exposure_factor is the smallest step that can be configured]
					* Default Exposure Time [Default exposure to be initialized for the control.
					*     Set default exposure based on the default_framerate for optimal exposure settings]
					*
					* gain_factor = ""; (integer factor used for floating to fixed point conversion)
					* min_gain_val = ""; (ceil to integer)
					* max_gain_val = ""; (ceil to integer)
					* step_gain_val = ""; (ceil to integer)
					* default_gain = ""; (ceil to integer)
					* Gain limits for mode
					*
					* exposure_factor = ""; (integer factor used for floating to fixed point conversion)
					* min_exp_time = ""; (ceil to integer)
					* max_exp_time = ""; (ceil to integer)
					* step_exp_time = ""; (ceil to integer)
					* default_exp_time = ""; (ceil to integer)
					* Exposure Time limits for mode (sec)
					*
					* framerate_factor = ""; (integer factor used for floating to fixed point conversion)
					* min_framerate = ""; (ceil to integer)
					* max_framerate = ""; (ceil to integer)
					* step_framerate = ""; (ceil to integer)
					* default_framerate = ""; (ceil to integer)
					* Framerate limits for mode (fps)
					*
					* embedded_metadata_height = "";
					* Sensor embedded metadata height in units of rows.
					* If sensor does not support embedded metadata value should be 0.
					*/
					mode0 {
						mclk_khz = "27000";
						num_lanes = "2";
						tegra_sinterface = "serial_c";
						phy_mode = "DPHY";
						discontinuous_clk = "no";
						dpcm_enable = "false";
						cil_settletime = "0";

						dynamic_pixel_bit_depth = "12";
						csi_pixel_bit_depth = "12";
						mode_type = "bayer";
						pixel_phase = "grbg";

						active_w = "3840";
						active_h = "2168";
						readout_orientation = "0";
						line_length = "5120";
						inherent_gain = "1";
						mclk_multiplier = "8";
						pix_clk_hz = "204963840";
						serdes_pix_clk_hz = "1300000000";

						gain_factor = "100";
						min_gain_val = "399";
						max_gain_val = "499"; /* 0:1x, 1:2x, 2:4x, 3:8x */
						step_gain_val = "1";
						default_gain = "399";

						min_hdr_ratio = "1";
						max_hdr_ratio = "1";

						framerate_factor = "1000000";
						min_framerate = "30000000";
						max_framerate = "30000000";
						step_framerate = "1";
						default_framerate = "30000000";

						exposure_factor = "1000000";
						min_exp_time = "100"; /* us */
						max_exp_time = "6800"; /* us */
						step_exp_time = "1";
						default_exp_time = "1000"; /* us */

						embedded_metadata_height = "0";
					};

					ports {
						#address-cells = <1>;
						#size-cells = <0>;
						port@0 {
							reg = <0>;
							rbpcv2_ar0820_out2: endpoint {
								port-index = <2>;
								bus-width = <2>;
								remote-endpoint = <&rbpcv2_ar0820_csi_in2>;
							};
						};
					};
				};

				ar0820@2a {
					compatible = "nvidia,ar0820";
					/* I2C device address */
					reg = <0x2a>;

					/* V4L2 device node location */
					devnode = "video3";

					/* Physical dimensions of sensor */
					physical_w = "15.0";
					physical_h = "12.5";

					sensor_model = "ar0820";

					post_crop_frame_drop = "0";

					use_sensor_mode_id = "true";

					/**
					* ==== Modes ====
					* A modeX node is required to support v4l2 driver
					* implementation with NVIDIA camera software stack
					*
					* == Signal properties ==
					*
					* phy_mode = "";
					* PHY mode used by the MIPI lanes for this device
					*
					* tegra_sinterface = "";
					* CSI Serial interface connected to tegra
					* Incase of virtual HW devices, use virtual
					* For SW emulated devices, use host
					*
					* pix_clk_hz = "";
					* Sensor pixel clock used for calculations like exposure and framerate
					*
					* readout_orientation = "0";
					* Based on camera module orientation.
					* Only change readout_orientation if you specifically
					* Program a different readout order for this mode
					*
					* == Image format Properties ==
					*
					* active_w = "";
					* Pixel active region width
					*
					* active_h = "";
					* Pixel active region height
					*
					* pixel_t = "";
					* The sensor readout pixel pattern
					*
					* line_length = "";
					* Pixel line length (width) for sensor mode.
					*
					* == Source Control Settings ==
					*
					* Gain factor used to convert fixed point integer to float
					* Gain range [min_gain/gain_factor, max_gain/gain_factor]
					* Gain step [step_gain/gain_factor is the smallest step that can be configured]
					* Default gain [Default gain to be initialized for the control.
					*     use min_gain_val as default for optimal results]
					* Framerate factor used to convert fixed point integer to float
					* Framerate range [min_framerate/framerate_factor, max_framerate/framerate_factor]
					* Framerate step [step_framerate/framerate_factor is the smallest step that can be configured]
					* Default Framerate [Default framerate to be initialized for the control.
					*     use max_framerate to get required performance]
					* Exposure factor used to convert fixed point integer to float
					* For convenience use 1 sec = 1000000us as conversion factor
					* Exposure range [min_exp_time/exposure_factor, max_exp_time/exposure_factor]
					* Exposure step [step_exp_time/exposure_factor is the smallest step that can be configured]
					* Default Exposure Time [Default exposure to be initialized for the control.
					*     Set default exposure based on the default_framerate for optimal exposure settings]
					*
					* gain_factor = ""; (integer factor used for floating to fixed point conversion)
					* min_gain_val = ""; (ceil to integer)
					* max_gain_val = ""; (ceil to integer)
					* step_gain_val = ""; (ceil to integer)
					* default_gain = ""; (ceil to integer)
					* Gain limits for mode
					*
					* exposure_factor = ""; (integer factor used for floating to fixed point conversion)
					* min_exp_time = ""; (ceil to integer)
					* max_exp_time = ""; (ceil to integer)
					* step_exp_time = ""; (ceil to integer)
					* default_exp_time = ""; (ceil to integer)
					* Exposure Time limits for mode (sec)
					*
					* framerate_factor = ""; (integer factor used for floating to fixed point conversion)
					* min_framerate = ""; (ceil to integer)
					* max_framerate = ""; (ceil to integer)
					* step_framerate = ""; (ceil to integer)
					* default_framerate = ""; (ceil to integer)
					* Framerate limits for mode (fps)
					*
					* embedded_metadata_height = "";
					* Sensor embedded metadata height in units of rows.
					* If sensor does not support embedded metadata value should be 0.
					*/
					mode0 {
						mclk_khz = "27000";
						num_lanes = "2";
						tegra_sinterface = "serial_d";
						phy_mode = "DPHY";
						discontinuous_clk = "no";
						dpcm_enable = "false";
						cil_settletime = "0";

						dynamic_pixel_bit_depth = "12";
						csi_pixel_bit_depth = "12";
						mode_type = "bayer";
						pixel_phase = "grbg";

						active_w = "3840";
						active_h = "2168";
						readout_orientation = "0";
						line_length = "5120";
						inherent_gain = "1";
						mclk_multiplier = "8";
						pix_clk_hz = "204963840";
						serdes_pix_clk_hz = "1300000000";

						gain_factor = "100";
						min_gain_val = "399";
						max_gain_val = "499"; /* 0:1x, 1:2x, 2:4x, 3:8x */
						step_gain_val = "1";
						default_gain = "399";

						min_hdr_ratio = "1";
						max_hdr_ratio = "1";

						framerate_factor = "1000000";
						min_framerate = "30000000";
						max_framerate = "30000000";
						step_framerate = "1";
						default_framerate = "30000000";

						exposure_factor = "1000000";
						min_exp_time = "100"; /* us */
						max_exp_time = "6800"; /* us */
						step_exp_time = "1";
						default_exp_time = "1000"; /* us */

						embedded_metadata_height = "0";
					};


					ports {
						#address-cells = <1>;
						#size-cells = <0>;
						port@0 {
							reg = <0>;
							rbpcv2_ar0820_out3: endpoint {
								port-index = <3>;
								bus-width = <2>;
								remote-endpoint = <&rbpcv2_ar0820_csi_in3>;
							};
						};
					};
				};
			};

			i2c@2 {
				ar0820@28 {
					compatible = "nvidia,ar0820";
					/* I2C device address */
					reg = <0x28>;

					/* V4L2 device node location */
					devnode = "video4";

					/* Physical dimensions of sensor */
					physical_w = "15.0";
					physical_h = "12.5";

					sensor_model = "ar0820";

					post_crop_frame_drop = "0";

					use_sensor_mode_id = "true";

					/**
					* ==== Modes ====
					* A modeX node is required to support v4l2 driver
					* implementation with NVIDIA camera software stack
					*
					* == Signal properties ==
					*
					* phy_mode = "";
					* PHY mode used by the MIPI lanes for this device
					*
					* tegra_sinterface = "";
					* CSI Serial interface connected to tegra
					* Incase of virtual HW devices, use virtual
					* For SW emulated devices, use host
					*
					* pix_clk_hz = "";
					* Sensor pixel clock used for calculations like exposure and framerate
					*
					* readout_orientation = "0";
					* Based on camera module orientation.
					* Only change readout_orientation if you specifically
					* Program a different readout order for this mode
					*
					* == Image format Properties ==
					*
					* active_w = "";
					* Pixel active region width
					*
					* active_h = "";
					* Pixel active region height
					*
					* pixel_t = "";
					* The sensor readout pixel pattern
					*
					* line_length = "";
					* Pixel line length (width) for sensor mode.
					*
					* == Source Control Settings ==
					*
					* Gain factor used to convert fixed point integer to float
					* Gain range [min_gain/gain_factor, max_gain/gain_factor]
					* Gain step [step_gain/gain_factor is the smallest step that can be configured]
					* Default gain [Default gain to be initialized for the control.
					*     use min_gain_val as default for optimal results]
					* Framerate factor used to convert fixed point integer to float
					* Framerate range [min_framerate/framerate_factor, max_framerate/framerate_factor]
					* Framerate step [step_framerate/framerate_factor is the smallest step that can be configured]
					* Default Framerate [Default framerate to be initialized for the control.
					*     use max_framerate to get required performance]
					* Exposure factor used to convert fixed point integer to float
					* For convenience use 1 sec = 1000000us as conversion factor
					* Exposure range [min_exp_time/exposure_factor, max_exp_time/exposure_factor]
					* Exposure step [step_exp_time/exposure_factor is the smallest step that can be configured]
					* Default Exposure Time [Default exposure to be initialized for the control.
					*     Set default exposure based on the default_framerate for optimal exposure settings]
					*
					* gain_factor = ""; (integer factor used for floating to fixed point conversion)
					* min_gain_val = ""; (ceil to integer)
					* max_gain_val = ""; (ceil to integer)
					* step_gain_val = ""; (ceil to integer)
					* default_gain = ""; (ceil to integer)
					* Gain limits for mode
					*
					* exposure_factor = ""; (integer factor used for floating to fixed point conversion)
					* min_exp_time = ""; (ceil to integer)
					* max_exp_time = ""; (ceil to integer)
					* step_exp_time = ""; (ceil to integer)
					* default_exp_time = ""; (ceil to integer)
					* Exposure Time limits for mode (sec)
					*
					* framerate_factor = ""; (integer factor used for floating to fixed point conversion)
					* min_framerate = ""; (ceil to integer)
					* max_framerate = ""; (ceil to integer)
					* step_framerate = ""; (ceil to integer)
					* default_framerate = ""; (ceil to integer)
					* Framerate limits for mode (fps)
					*
					* embedded_metadata_height = "";
					* Sensor embedded metadata height in units of rows.
					* If sensor does not support embedded metadata value should be 0.
					*/
					mode0 {
						mclk_khz = "27000";
						num_lanes = "2";
						tegra_sinterface = "serial_e";
						phy_mode = "DPHY";
						discontinuous_clk = "no";
						dpcm_enable = "false";
						cil_settletime = "0";

						dynamic_pixel_bit_depth = "12";
						csi_pixel_bit_depth = "12";
						mode_type = "bayer";
						pixel_phase = "grbg";

						active_w = "3840";
						active_h = "2168";
						readout_orientation = "0";
						line_length = "5120";
						inherent_gain = "1";
						mclk_multiplier = "8";
						pix_clk_hz = "204963840";
						serdes_pix_clk_hz = "1300000000";

						gain_factor = "100";
						min_gain_val = "399";
						max_gain_val = "499"; /* 0:1x, 1:2x, 2:4x, 3:8x */
						step_gain_val = "1";
						default_gain = "399";

						min_hdr_ratio = "1";
						max_hdr_ratio = "1";

						framerate_factor = "1000000";
						min_framerate = "30000000";
						max_framerate = "30000000";
						step_framerate = "1";
						default_framerate = "30000000";

						exposure_factor = "1000000";
						min_exp_time = "100"; /* us */
						max_exp_time = "6800"; /* us */
						step_exp_time = "1";
						default_exp_time = "1000"; /* us */

						embedded_metadata_height = "0";
					};

					ports {
						#address-cells = <1>;
						#size-cells = <0>;
						port@0 {
							reg = <0>;
							rbpcv2_ar0820_out4: endpoint {
								port-index = <4>;
								bus-width = <2>;
								remote-endpoint = <&rbpcv2_ar0820_csi_in4>;
							};
						};
					};
				};

				ar0820@2a {
					compatible = "nvidia,ar0820";
					/* I2C device address */
					reg = <0x2a>;

					/* V4L2 device node location */
					devnode = "video5";

					/* Physical dimensions of sensor */
					physical_w = "15.0";
					physical_h = "12.5";

					sensor_model = "ar0820";

					post_crop_frame_drop = "0";

					use_sensor_mode_id = "true";

					/**
					* ==== Modes ====
					* A modeX node is required to support v4l2 driver
					* implementation with NVIDIA camera software stack
					*
					* == Signal properties ==
					*
					* phy_mode = "";
					* PHY mode used by the MIPI lanes for this device
					*
					* tegra_sinterface = "";
					* CSI Serial interface connected to tegra
					* Incase of virtual HW devices, use virtual
					* For SW emulated devices, use host
					*
					* pix_clk_hz = "";
					* Sensor pixel clock used for calculations like exposure and framerate
					*
					* readout_orientation = "0";
					* Based on camera module orientation.
					* Only change readout_orientation if you specifically
					* Program a different readout order for this mode
					*
					* == Image format Properties ==
					*
					* active_w = "";
					* Pixel active region width
					*
					* active_h = "";
					* Pixel active region height
					*
					* pixel_t = "";
					* The sensor readout pixel pattern
					*
					* line_length = "";
					* Pixel line length (width) for sensor mode.
					*
					* == Source Control Settings ==
					*
					* Gain factor used to convert fixed point integer to float
					* Gain range [min_gain/gain_factor, max_gain/gain_factor]
					* Gain step [step_gain/gain_factor is the smallest step that can be configured]
					* Default gain [Default gain to be initialized for the control.
					*     use min_gain_val as default for optimal results]
					* Framerate factor used to convert fixed point integer to float
					* Framerate range [min_framerate/framerate_factor, max_framerate/framerate_factor]
					* Framerate step [step_framerate/framerate_factor is the smallest step that can be configured]
					* Default Framerate [Default framerate to be initialized for the control.
					*     use max_framerate to get required performance]
					* Exposure factor used to convert fixed point integer to float
					* For convenience use 1 sec = 1000000us as conversion factor
					* Exposure range [min_exp_time/exposure_factor, max_exp_time/exposure_factor]
					* Exposure step [step_exp_time/exposure_factor is the smallest step that can be configured]
					* Default Exposure Time [Default exposure to be initialized for the control.
					*     Set default exposure based on the default_framerate for optimal exposure settings]
					*
					* gain_factor = ""; (integer factor used for floating to fixed point conversion)
					* min_gain_val = ""; (ceil to integer)
					* max_gain_val = ""; (ceil to integer)
					* step_gain_val = ""; (ceil to integer)
					* default_gain = ""; (ceil to integer)
					* Gain limits for mode
					*
					* exposure_factor = ""; (integer factor used for floating to fixed point conversion)
					* min_exp_time = ""; (ceil to integer)
					* max_exp_time = ""; (ceil to integer)
					* step_exp_time = ""; (ceil to integer)
					* default_exp_time = ""; (ceil to integer)
					* Exposure Time limits for mode (sec)
					*
					* framerate_factor = ""; (integer factor used for floating to fixed point conversion)
					* min_framerate = ""; (ceil to integer)
					* max_framerate = ""; (ceil to integer)
					* step_framerate = ""; (ceil to integer)
					* default_framerate = ""; (ceil to integer)
					* Framerate limits for mode (fps)
					*
					* embedded_metadata_height = "";
					* Sensor embedded metadata height in units of rows.
					* If sensor does not support embedded metadata value should be 0.
					*/
					mode0 {
						mclk_khz = "27000";
						num_lanes = "2";
						tegra_sinterface = "serial_g";
						phy_mode = "DPHY";
						discontinuous_clk = "no";
						dpcm_enable = "false";
						cil_settletime = "0";

						dynamic_pixel_bit_depth = "12";
						csi_pixel_bit_depth = "12";
						mode_type = "bayer";
						pixel_phase = "grbg";

						active_w = "3840";
						active_h = "2168";
						readout_orientation = "0";
						line_length = "5120";
						inherent_gain = "1";
						mclk_multiplier = "8";
						pix_clk_hz = "204963840";
						serdes_pix_clk_hz = "1300000000";

						gain_factor = "100";
						min_gain_val = "399";
						max_gain_val = "499"; /* 0:1x, 1:2x, 2:4x, 3:8x */
						step_gain_val = "1";
						default_gain = "399";

						min_hdr_ratio = "1";
						max_hdr_ratio = "1";

						framerate_factor = "1000000";
						min_framerate = "30000000";
						max_framerate = "30000000";
						step_framerate = "1";
						default_framerate = "30000000";

						exposure_factor = "1000000";
						min_exp_time = "100"; /* us */
						max_exp_time = "6800"; /* us */
						step_exp_time = "1";
						default_exp_time = "1000"; /* us */

						embedded_metadata_height = "0";
					};


					ports {
						#address-cells = <1>;
						#size-cells = <0>;
						port@0 {
							reg = <0>;
							rbpcv2_ar0820_out5: endpoint {
								port-index = <5>;
								bus-width = <2>;
								remote-endpoint = <&rbpcv2_ar0820_csi_in5>;
							};
						};
					};
				};
			};
		};
	};

	lens_ar0820@RBPCV2 {
		min_focus_distance = "0.0";
		hyper_focal = "0.0";
		focal_length = "3.04";
		f_number = "2.0";
		aperture = "0.0";
	};
};
/ {
	tcp: tegra-camera-platform {
		compatible = "nvidia, tegra-camera-platform";
		/**
		* Physical settings to calculate max ISO BW
		*
		* num_csi_lanes = <>;
		* Total number of CSI lanes when all cameras are active
		*
		* max_lane_speed = <>;
		* Max lane speed in Kbit/s
		*
		* min_bits_per_pixel = <>;
		* Min bits per pixel
		*
		* vi_peak_byte_per_pixel = <>;
		* Max byte per pixel for the VI ISO case
		*
		* vi_bw_margin_pct = <>;
		* Vi bandwidth margin in percentage
		*
		* max_pixel_rate = <>;
		* Max pixel rate in Kpixel/s for the ISP ISO case
		*
		* isp_peak_byte_per_pixel = <>;
		* Max byte per pixel for the ISP ISO case
		*
		* isp_bw_margin_pct = <>;
		* Isp bandwidth margin in percentage
		*/
		num_csi_lanes = <12>;
		max_lane_speed = <1500000>;
		min_bits_per_pixel = <10>;
		vi_peak_byte_per_pixel = <2>;
		vi_bw_margin_pct = <25>;
		max_pixel_rate = <240000>;
		isp_peak_byte_per_pixel = <5>;
		isp_bw_margin_pct = <25>;

		/**
		 * The general guideline for naming badge_info contains 3 parts, and is as follows,
		 * The first part is the camera_board_id for the module; if the module is in a FFD
		 * platform, then use the platform name for this part.
		 * The second part contains the position of the module, ex. "rear" or "front".
		 * The third part contains the last 6 characters of a part number which is found
		 * in the module's specsheet from the vendor.
		 */
		modules {
			cam_module0: module0 {
				badge = "jakku_bottomleft_RBP194";
				position = "bottomleft";
				orientation = "1";
				cam_module0_drivernode0: drivernode0 {
					pcl_id = "v4l2_sensor";
					devname = "ar0820 30-0028";
					proc-device-tree = "/proc/device-tree/i2c@3180000/tca9548@77/i2c@0/ar0820@28";
				};
				cam_module0_drivernode1: drivernode1 {
					pcl_id = "v4l2_lens";
					proc-device-tree = "/proc/device-tree/lens_ar0820@RBPCV2/";
				};
			};

			cam_module1: module1 {
				badge = "jakku_bottomright_RBP194";
				position = "bottomright";
				orientation = "1";
				cam_module1_drivernode0: drivernode0 {
					pcl_id = "v4l2_sensor";
					devname = "ar0820 30-002a";
					proc-device-tree = "/proc/device-tree/i2c@3180000/tca9548@77/i2c@0/ar0820@2a";
				};
				cam_module1_drivernode1: drivernode1 {
					pcl_id = "v4l2_lens";
					proc-device-tree = "/proc/device-tree/lens_ar0820@RBPCV2/";
				};
			};

			cam_module2: module2 {
				badge = "jakku_centerleft_RBP194";
				position = "centerleft";
				orientation = "1";
				cam_module2_drivernode0: drivernode0 {
					pcl_id = "v4l2_sensor";
					devname = "ar0820 31-0028";
					proc-device-tree = "/proc/device-tree/i2c@3180000/tca9548@77/i2c@1/ar0820@28";
				};
				cam_module2_drivernode1: drivernode1 {
					pcl_id = "v4l2_lens";
					proc-device-tree = "/proc/device-tree/lens_ar0820@RBPCV2/";
				};
			};

			cam_module3: module3 {
				badge = "jakku_centerright_RBP194";
				position = "centerright";
				orientation = "1";
				cam_module3_drivernode0: drivernode0 {
					pcl_id = "v4l2_sensor";
					devname = "ar0820 31-002a";
					proc-device-tree = "/proc/device-tree/i2c@3180000/tca9548@77/i2c@1/ar0820@2a";
				};
				cam_module3_drivernode1: drivernode1 {
					pcl_id = "v4l2_lens";
					proc-device-tree = "/proc/device-tree/lens_ar0820@RBPCV2/";
				};
			};

			cam_module4: module4 {
				badge = "jakku_topleft_RBP194";
				position = "topleft";
				orientation = "1";
				cam_module4_drivernode0: drivernode0 {
					pcl_id = "v4l2_sensor";
					devname = "ar0820 32-0028";
					proc-device-tree = "/proc/device-tree/i2c@3180000/tca9548@77/i2c@2/ar0820@28";
				};
				cam_module4_drivernode1: drivernode1 {
					pcl_id = "v4l2_lens";
					proc-device-tree = "/proc/device-tree/lens_ar0820@RBPCV2/";
				};
			};

			cam_module5: module5 {
				badge = "jakku_topright_RBP194";
				position = "topright";
				orientation = "1";
				cam_module5_drivernode0: drivernode0 {
					pcl_id = "v4l2_sensor";
					devname = "ar0820 32-002a";
					proc-device-tree = "/proc/device-tree/i2c@3180000/tca9548@77/i2c@2/ar0820@2a";
				};
				cam_module5_drivernode1: drivernode1 {
					pcl_id = "v4l2_lens";
					proc-device-tree = "/proc/device-tree/lens_ar0820@RBPCV2/";
				};
			};
		};
	};
};
